// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        world1: { value: [0.0, 0.0, 0.0, 0.0] }
        world2: { value: [0.0, 0.0, 0.0, 0.0] }
        world3: { value: [0.0, 0.0, 0.0, 0.0] }
        world4: { value: [0.0, 0.0, 0.0, 0.0] }
        texture: { value: white }
        minRadius: { value: 0.1 }
        maxRadius: { value: 0.5 }
        sectorAngle: { value: 90.0 }
        saturation: { value: 1.0 }
        forward: { value: [0.0, 0.0, 0.0, 0.0] }
        areaColor: { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    v_uv0 = a_uv0;
    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;

  uniform SectorFloat {
    float minRadius;
    float maxRadius;
    float sectorAngle;
    float saturation;
  };

  uniform SectorVector {
    vec4 forward;
    vec4 areaColor;
    vec4 world1;
    vec4 world2;
    vec4 world3;
    vec4 world4;
  };

  // 返回角度
  float calulateAngle (vec2 posA, vec2 posB) {
      // 这里给老子记住公式！！！ A点B=length(A) * length(B) * cos delta
      float projection = dot(posA, posB);
      float radian = acos( projection / (length(posA) * length(posB)) );
      float angle = degrees(radian);

      return angle;
  }

  bool checkRay (vec4 ray) {
      // 线段A
      vec2 a1 = vec2(ray.x, ray.y);
      vec2 a2 = vec2(ray.z, ray.w);

      // world1
      vec2 b1 = vec2(0.3, 0.2);
      vec2 b2 = vec2(0.7, 0.2);

      float ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
      float ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
      float u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);

      if ( u_b != 0.0 ) {
          float ua = ua_t / u_b;
          float ub = ub_t / u_b;

          if ( 0.0 <= ua && ua <= 1.0 && 0.0 <= ub && ub <= 1.0 ) {
              return true;
          }
      }

      return false;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 uv = v_uv0;

    o *= texture(texture, v_uv0);

    vec2 position = vec2(0.5 - uv.x, 0.5 - uv.y) * vec2(1.0, 1.0);

    float mold = length(position);
    float angle = abs(calulateAngle(position, forward.xy));

    if (abs(mold) > maxRadius || abs(mold) < minRadius || angle > sectorAngle / 2.0 || checkRay(vec4(0.5, 0.5, uv.x, uv.y))) { 
        discard;
    }
    else {
        gl_FragColor = vec4(areaColor.rgb, (mold - minRadius) / (1.0 - minRadius) * saturation);
    }
  }
}%
