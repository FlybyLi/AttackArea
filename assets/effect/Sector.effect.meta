{
  "ver": "1.0.25",
  "uuid": "eaed01d8-12d7-4d55-9e00-40d8cdc0ab87",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float minRadius;\nuniform float maxRadius;\nuniform float sectorAngle;\nuniform float saturation;\nuniform vec4 forward;\nuniform vec4 areaColor;\nuniform vec4 world1;\nuniform vec4 world2;\nuniform vec4 world3;\nuniform vec4 world4;\nuniform vec2 center;\nfloat calulateAngle (vec2 posA, vec2 posB) {\n    float projection = dot(posA, posB);\n    float radian = acos( projection / (length(posA) * length(posB)) );\n    float angle = degrees(radian);\n    return angle;\n}\nbool collisionTest (vec4 world) {\n    vec2 a1 = vec2(0.0, 0.0);\n    vec2 a2 = vec2(gl_FragCoord.x - 0.5 - center.x, gl_FragCoord.y - 0.5 - center.y);\n    vec2 b1 = vec2(world.x - center.x, world.y - center.y);\n    vec2 b2 = vec2(world.z - center.x, world.w - center.y);\n    float ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    float ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    float D  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if ( D != 0.0 ) {\n        float ua = ua_t / D;\n        float ub = ub_t / D;\n        if ( 0.0 <= ua && ua <= 1.0 && 0.0 <= ub && ub <= 1.0 ) {\n            return true;\n        }\n    }\n    return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  o *= texture2D(texture, v_uv0);\n  vec2 position = vec2(0.5 - uv.x, 0.5 - uv.y) * vec2(1.0, 1.0);\n  float mold = length(position);\n  float angle = abs(calulateAngle(position, forward.xy));\n  if (\n      abs(mold) > maxRadius\n      || abs(mold) < minRadius\n      || angle > sectorAngle / 2.0\n      || collisionTest(world1)\n      || collisionTest(world2)\n      || collisionTest(world3)\n      || collisionTest(world4)\n    ) {\n      discard;\n  }\n  else {\n      gl_FragColor = vec4(areaColor.rgb, (mold - minRadius) / (1.0 - minRadius) * saturation);\n  }\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform SectorFloat {\n  float minRadius;\n  float maxRadius;\n  float sectorAngle;\n  float saturation;\n};\nuniform SectorVector {\n  vec4 forward;\n  vec4 areaColor;\n  vec4 world1;\n  vec4 world2;\n  vec4 world3;\n  vec4 world4;\n  vec2 screenSize;\n  vec2 center;\n};\nfloat calulateAngle (vec2 posA, vec2 posB) {\n    float projection = dot(posA, posB);\n    float radian = acos( projection / (length(posA) * length(posB)) );\n    float angle = degrees(radian);\n    return angle;\n}\nbool collisionTest (vec4 world) {\n    vec2 a1 = vec2(0.0, 0.0);\n    vec2 a2 = vec2(gl_FragCoord.x - 0.5 - center.x, gl_FragCoord.y - 0.5 - center.y);\n    vec2 b1 = vec2(world.x - center.x, world.y - center.y);\n    vec2 b2 = vec2(world.z - center.x, world.w - center.y);\n    float ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    float ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    float D  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if ( D != 0.0 ) {\n        float ua = ua_t / D;\n        float ub = ub_t / D;\n        if ( 0.0 <= ua && ua <= 1.0 && 0.0 <= ub && ub <= 1.0 ) {\n            return true;\n        }\n    }\n    return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  o *= texture(texture, v_uv0);\n  vec2 position = vec2(0.5 - uv.x, 0.5 - uv.y) * vec2(1.0, 1.0);\n  float mold = length(position);\n  float angle = abs(calulateAngle(position, forward.xy));\n  if (\n      abs(mold) > maxRadius\n      || abs(mold) < minRadius\n      || angle > sectorAngle / 2.0\n      || collisionTest(world1)\n      || collisionTest(world2)\n      || collisionTest(world3)\n      || collisionTest(world4)\n    ) {\n      discard;\n  }\n  else {\n      gl_FragColor = vec4(areaColor.rgb, (mold - minRadius) / (1.0 - minRadius) * saturation);\n  }\n}"
      }
    }
  ],
  "subMetas": {}
}